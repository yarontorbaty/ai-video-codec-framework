AWSTemplateFormatVersion: '2010-09-09'
Description: 'Health Monitoring and Auto-Healing for AI Video Codec Orchestrator'

Parameters:
  ProjectName:
    Type: String
    Default: ai-video-codec
    Description: Project name prefix
  
  OrchestratorInstanceId:
    Type: String
    Default: i-063947ae46af6dbf8
    Description: EC2 instance ID of the orchestrator
  
  HealthCheckSchedule:
    Type: String
    Default: rate(5 minutes)
    Description: How often to run health checks

Resources:
  # Lambda execution role
  HealthMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-health-monitor-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: HealthMonitorPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # SSM permissions to run commands on orchestrator
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                Resource: '*'
              
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-*'
              
              # CloudWatch permissions
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                Resource: '*'
              
              # SNS permissions for alerts
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref HealthAlertTopic

  # Health Monitor Lambda Function
  HealthMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-health-monitor'
      Runtime: python3.9
      Handler: health_monitor.lambda_handler
      Role: !GetAtt HealthMonitorRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          ORCHESTRATOR_INSTANCE_ID: !Ref OrchestratorInstanceId
          EXPERIMENTS_TABLE: !Sub '${ProjectName}-experiments'
          METRICS_TABLE: !Sub '${ProjectName}-metrics'
          CONTROL_TABLE: !Sub '${ProjectName}-control'
          SNS_TOPIC_ARN: !Ref HealthAlertTopic
      Code:
        ZipFile: |
          # Placeholder - will be updated via deployment
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}

  # EventBridge rule to trigger health checks
  HealthCheckScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-health-check-schedule'
      Description: Triggers health check Lambda every 5 minutes
      ScheduleExpression: !Ref HealthCheckSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt HealthMonitorFunction.Arn
          Id: HealthMonitorTarget

  # Permission for EventBridge to invoke Lambda
  HealthCheckSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HealthCheckScheduleRule.Arn

  # SNS Topic for health alerts
  HealthAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-health-alerts'
      DisplayName: AI Video Codec Health Alerts
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Alarms
  OrchestratorDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-orchestrator-down'
      AlarmDescription: Orchestrator process is not running
      MetricName: OrchestratorRunning
      Namespace: AiVideoCodec/Orchestrator
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.5
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref HealthAlertTopic
      TreatMissingData: breaching

  NoRecentExperimentsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-no-recent-experiments'
      AlarmDescription: No experiments have run in the last 10 minutes
      MetricName: RecentExperiments
      Namespace: AiVideoCodec/Orchestrator
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      Threshold: 0.5
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref HealthAlertTopic
      TreatMissingData: breaching

  HighDiskUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-high-disk-usage'
      AlarmDescription: Disk usage is above 85%
      MetricName: DiskUsage
      Namespace: AiVideoCodec/Orchestrator
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref HealthAlertTopic

  HighMemoryUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-high-memory-usage'
      AlarmDescription: Memory usage is above 90%
      MetricName: MemoryUsage
      Namespace: AiVideoCodec/Orchestrator
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref HealthAlertTopic

  # CloudWatch Dashboard
  HealthMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-health-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AiVideoCodec/Orchestrator", "OrchestratorRunning"],
                  [".", "RecentExperiments"],
                  [".", "OverallHealth"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Orchestrator Health Status",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 1
                  }
                }
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AiVideoCodec/Orchestrator", "CPUUsage"],
                  [".", "MemoryUsage"],
                  [".", "DiskUsage"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Usage",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            }
          ]
        }

Outputs:
  HealthMonitorFunctionArn:
    Description: ARN of the health monitor Lambda function
    Value: !GetAtt HealthMonitorFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-health-monitor-arn'
  
  HealthAlertTopicArn:
    Description: ARN of the SNS topic for health alerts
    Value: !Ref HealthAlertTopic
    Export:
      Name: !Sub '${ProjectName}-health-alert-topic'
  
  DashboardURL:
    Description: URL to the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-health-monitoring'

