AWSTemplateFormatVersion: '2010-09-09'
Description: 'AiV1 - Secure Server-Side Rendered Dashboard'

Parameters:
  ProjectName:
    Type: String
    Default: ai-video-codec
    Description: Name of the project
    
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - production
    Description: Environment name
    
  DomainName:
    Type: String
    Default: 'aiv1codec.com'
    Description: Custom domain name (optional)
    
  CertificateArn:
    Type: String
    Default: ''
    Description: SSL certificate ARN for custom domain (optional)

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # Lambda Function for Server-Side Dashboard Rendering
  DashboardRendererFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-dashboard-renderer'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt DashboardRendererFunctionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          
          def handler(event, context):
              try:
                  # Get all dashboard data
                  dashboard_data = get_dashboard_data()
                  
                  # Generate HTML with embedded data
                  html_content = generate_dashboard_html(dashboard_data)
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'text/html',
                          'Cache-Control': 'no-cache'
                      },
                      'body': html_content
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'text/html'
                      },
                      'body': generate_error_html(str(e))
                  }
          
          def get_dashboard_data():
              """Get all dashboard data from AWS services"""
              cf = boto3.client('cloudformation')
              cloudwatch = boto3.client('cloudwatch')
              dynamodb = boto3.resource('dynamodb')
              ce = boto3.client('ce')
              
              try:
                  # Get CloudFormation outputs
                  stack_outputs = cf.describe_stacks(
                      StackName=f'ai-video-codec-{os.environ.get("ENVIRONMENT", "production")}-compute'
                  )['Stacks'][0]['Outputs']
                  
                  outputs = {output['OutputKey']: output['OutputValue'] for output in stack_outputs}
                  
                  # Get orchestrator metrics
                  orchestrator_instance_id = 'i-063947ae46af6dbf8'
                  orchestrator_cpu = get_cloudwatch_metric(cloudwatch, 'AWS/EC2', 'CPUUtilization', orchestrator_instance_id)
                  
                  # Get experiments from DynamoDB
                  experiments = []
                  try:
                      table = dynamodb.Table('ai-video-codec-experiments')
                      response = table.scan(Limit=10)
                      for item in response.get('Items', []):
                          experiments.append({
                              'id': item.get('experiment_id', ''),
                              'status': item.get('status', 'unknown'),
                              'compression': item.get('compression_ratio', 0),
                              'quality': item.get('psnr', 0),
                              'created_at': item.get('created_at', ''),
                              'cost': item.get('cost', 0)
                          })
                  except:
                      experiments = [{'id': 'No data', 'status': 'No data', 'compression': 'No data', 'quality': 'No data', 'created_at': 'No data', 'cost': 'No data'}]
                  
                  # Get cost data
                  costs = {'monthly': 0, 'breakdown': {'training': 0, 'inference': 0, 'storage': 0, 'orchestrator': 0}}
                  try:
                      start_date = datetime.now().replace(day=1).strftime('%Y-%m-%d')
                      end_date = datetime.now().strftime('%Y-%m-%d')
                      
                      response = ce.get_cost_and_usage(
                          TimePeriod={'Start': start_date, 'End': end_date},
                          Granularity='MONTHLY',
                          Metrics=['UnblendedCost']
                      )
                      
                      total_cost = float(response['ResultsByTime'][0]['Total']['UnblendedCost']['Amount'])
                      costs = {
                          'monthly': total_cost,
                          'breakdown': {
                              'training': total_cost * 0.6,
                              'inference': total_cost * 0.2,
                              'storage': total_cost * 0.1,
                              'orchestrator': total_cost * 0.1
                          }
                      }
                  except:
                      pass
                  
                  return {
                      'orchestrator_ip': outputs.get('OrchestratorPublicIP', ''),
                      'orchestrator_cpu': orchestrator_cpu,
                      'orchestrator_memory': 'No data',
                      'training_queue': outputs.get('TrainingQueueUrl', ''),
                      'evaluation_queue': outputs.get('EvaluationQueueUrl', ''),
                      'experiments': experiments,
                      'costs': costs,
                      'last_updated': datetime.now().strftime('%I:%M:%S %p')
                  }
              except Exception as e:
                  return {
                      'orchestrator_ip': '',
                      'orchestrator_cpu': 'No data',
                      'orchestrator_memory': 'No data',
                      'training_queue': '',
                      'evaluation_queue': '',
                      'experiments': [{'id': 'No data', 'status': 'No data', 'compression': 'No data', 'quality': 'No data', 'created_at': 'No data', 'cost': 'No data'}],
                      'costs': {'monthly': 0, 'breakdown': {'training': 0, 'inference': 0, 'storage': 0, 'orchestrator': 0}},
                      'last_updated': datetime.now().strftime('%I:%M:%S %p')
                  }
          
          def get_cloudwatch_metric(cloudwatch, namespace, metric_name, instance_id):
              try:
                  if not instance_id:
                      return 'No data'
                  
                  # Get metric statistics for the last 5 minutes
                  end_time = datetime.utcnow()
                  start_time = end_time - timedelta(minutes=5)
                  
                  response = cloudwatch.get_metric_statistics(
                      Namespace=namespace,
                      MetricName=metric_name,
                      Dimensions=[
                          {
                              'Name': 'InstanceId',
                              'Value': instance_id
                          }
                      ],
                      StartTime=start_time,
                      EndTime=end_time,
                      Period=300,
                      Statistics=['Average']
                  )
                  
                  if response['Datapoints']:
                      # Get the most recent datapoint
                      latest_datapoint = max(response['Datapoints'], key=lambda x: x['Timestamp'])
                      return round(latest_datapoint['Average'], 1)
                  else:
                      return 'No data'
              except Exception as e:
                  return 'No data'
          
          def generate_dashboard_html(data):
              """Generate complete HTML dashboard with embedded data"""
              return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AiV1 - Live Dashboard</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; color: #333; }}
        .dashboard {{ min-height: 100vh; display: flex; flex-direction: column; }}
        .header {{ background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-bottom: 1px solid rgba(255, 255, 255, 0.2); padding: 1rem 0; position: sticky; top: 0; z-index: 100; }}
        .header-content {{ max-width: 1200px; margin: 0 auto; padding: 0 2rem; display: flex; align-items: center; justify-content: space-between; }}
        .logo {{ display: flex; align-items: center; gap: 0.75rem; }}
        .logo i {{ font-size: 1.5rem; color: #667eea; }}
        .logo h1 {{ font-size: 1.5rem; font-weight: 700; color: #2d3748; }}
        .status-indicator {{ display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; background: rgba(56, 161, 105, 0.1); border-radius: 0.5rem; border: 1px solid rgba(56, 161, 105, 0.2); }}
        .status-dot {{ width: 8px; height: 8px; border-radius: 50%; background: #38a169; }}
        .last-updated {{ display: flex; align-items: center; gap: 0.5rem; color: #718096; font-size: 0.875rem; }}
        .main-content {{ flex: 1; max-width: 1200px; margin: 0 auto; padding: 2rem; width: 100%; }}
        .overview-section {{ margin-bottom: 3rem; }}
        .overview-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; }}
        .card {{ background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1); }}
        .card-header {{ display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; }}
        .card-header i {{ font-size: 1.25rem; color: #667eea; }}
        .card-header h3 {{ font-size: 1rem; font-weight: 600; color: #4a5568; }}
        .metric-value {{ font-size: 2.5rem; font-weight: 700; color: #2d3748; margin-bottom: 0.5rem; }}
        .metric-label {{ font-size: 0.875rem; color: #718096; margin-bottom: 0.75rem; }}
        .infrastructure-section {{ margin-bottom: 3rem; }}
        .infrastructure-section h2 {{ font-size: 1.5rem; font-weight: 700; color: #1a202c; margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.75rem; text-shadow: 0 1px 2px rgba(255, 255, 255, 0.8); }}
        .infrastructure-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; }}
        .infra-card {{ background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1); }}
        .infra-header {{ display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; }}
        .infra-header i {{ font-size: 1.25rem; color: #667eea; }}
        .infra-header h4 {{ font-size: 1rem; font-weight: 600; color: #4a5568; }}
        .infra-status {{ display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem; padding: 0.5rem 1rem; background: rgba(56, 161, 105, 0.1); border-radius: 0.5rem; border: 1px solid rgba(56, 161, 105, 0.2); }}
        .infra-status .status-dot {{ width: 8px; height: 8px; border-radius: 50%; background: #38a169; }}
        .infra-details {{ display: flex; flex-direction: column; gap: 0.5rem; }}
        .detail {{ display: flex; justify-content: space-between; font-size: 0.875rem; }}
        .detail span:first-child {{ color: #718096; }}
        .detail span:last-child {{ color: #2d3748; font-weight: 500; }}
        .footer {{ background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-top: 1px solid rgba(255, 255, 255, 0.2); padding: 2rem 0; margin-top: auto; }}
        .footer-content {{ max-width: 1200px; margin: 0 auto; padding: 0 2rem; display: flex; justify-content: space-between; align-items: center; }}
        .footer-left p {{ color: #718096; font-size: 0.875rem; }}
        @media (max-width: 768px) {{ .header-content {{ flex-direction: column; gap: 1rem; text-align: center; }} .main-content {{ padding: 1rem; }} .overview-grid {{ grid-template-columns: 1fr; }} .infrastructure-grid {{ grid-template-columns: 1fr; }} }}
    </style>
</head>
<body>
    <div class="dashboard">
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-video"></i>
                    <h1>AiV1</h1>
                </div>
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span>Connected</span>
                </div>
                <div class="last-updated">
                    <i class="fas fa-clock"></i>
                    <span>{data['last_updated']}</span>
                </div>
            </div>
        </header>

        <main class="main-content">
            <section class="overview-section">
                <div class="overview-grid">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-chart-line"></i>
                            <h3>Experiments</h3>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">{len(data['experiments']) if data['experiments'][0]['id'] != 'No data' else 0}</div>
                            <div class="metric-label">Total Experiments</div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-compress-arrows-alt"></i>
                            <h3>Best Compression</h3>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">{max([exp.get('compression', 0) for exp in data['experiments'] if isinstance(exp.get('compression'), (int, float))]) if data['experiments'] and data['experiments'][0]['id'] != 'No data' else 0}%</div>
                            <div class="metric-label">Bitrate Reduction</div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-star"></i>
                            <h3>Best Quality</h3>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">{max([exp.get('quality', 0) for exp in data['experiments'] if isinstance(exp.get('quality'), (int, float))]) if data['experiments'] and data['experiments'][0]['id'] != 'No data' else 0}</div>
                            <div class="metric-label">PSNR (dB)</div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-dollar-sign"></i>
                            <h3>Monthly Cost</h3>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">${data['costs']['monthly']:,.2f}</div>
                            <div class="metric-label">USD</div>
                        </div>
                    </div>
                </div>
            </section>

            <section class="infrastructure-section">
                <h2><i class="fas fa-server"></i> Infrastructure Status</h2>
                <div class="infrastructure-grid">
                    <div class="infra-card">
                        <div class="infra-header">
                            <i class="fas fa-brain"></i>
                            <h4>Orchestrator</h4>
                        </div>
                        <div class="infra-status">
                            <div class="status-dot"></div>
                            <span>Healthy</span>
                        </div>
                        <div class="infra-details">
                            <div class="detail">
                                <span>Instance:</span>
                                <span>c6i.xlarge</span>
                            </div>
                            <div class="detail">
                                <span>CPU:</span>
                                <span>{data['orchestrator_cpu']}{'%' if isinstance(data['orchestrator_cpu'], (int, float)) else ''}</span>
                            </div>
                            <div class="detail">
                                <span>Memory:</span>
                                <span>{data['orchestrator_memory']}</span>
                            </div>
                        </div>
                    </div>

                    <div class="infra-card">
                        <div class="infra-header">
                            <i class="fas fa-cogs"></i>
                            <h4>Training Workers</h4>
                        </div>
                        <div class="infra-status">
                            <div class="status-dot"></div>
                            <span>Healthy</span>
                        </div>
                        <div class="infra-details">
                            <div class="detail">
                                <span>Queue:</span>
                                <span>Active</span>
                            </div>
                        </div>
                    </div>

                    <div class="infra-card">
                        <div class="infra-header">
                            <i class="fas fa-bolt"></i>
                            <h4>Inference Workers</h4>
                        </div>
                        <div class="infra-status">
                            <div class="status-dot"></div>
                            <span>Healthy</span>
                        </div>
                        <div class="infra-details">
                            <div class="detail">
                                <span>Queue:</span>
                                <span>Active</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <footer class="footer">
            <div class="footer-content">
                <div class="footer-left">
                    <p>&copy; 2025 AiV1. Open source under Apache 2.0.</p>
                </div>
            </div>
        </footer>
    </div>

    <script>
        // Auto-refresh every 30 seconds
        setTimeout(() => {{
            window.location.reload();
        }}, 30000);
    </script>
</body>
</html>"""
          
          def generate_error_html(error):
              """Generate error HTML page"""
              return f"""<!DOCTYPE html>
<html>
<head>
    <title>AiV1 Dashboard - Error</title>
    <style>
        body {{ font-family: Arial, sans-serif; background: #f5f5f5; display: flex; align-items: center; justify-content: center; min-height: 100vh; margin: 0; }}
        .error {{ background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center; }}
        h1 {{ color: #e53e3e; }}
    </style>
</head>
<body>
    <div class="error">
        <h1>Dashboard Error</h1>
        <p>Unable to load dashboard data.</p>
        <p><small>Error: {error}</small></p>
        <button onclick="window.location.reload()">Retry</button>
    </div>
</body>
</html>"""
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dashboard-renderer'
        - Key: Environment
          Value: !Ref Environment
          
  # Lambda Function Role
  DashboardRendererFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-dashboard-renderer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DashboardRendererPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - dynamodb:Scan
                  - dynamodb:Query
                  - ce:GetCostAndUsage
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - ec2:DescribeInstances
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dashboard-renderer-role'
        - Key: Environment
          Value: !Ref Environment
          
  # API Gateway (Single endpoint, no public APIs)
  DashboardAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-dashboard-api'
      Description: 'Secure API for AiV1 Dashboard'
      EndpointConfiguration:
        Types: [REGIONAL]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dashboard-api'
        - Key: Environment
          Value: !Ref Environment
          
  # API Gateway Root Resource
  DashboardAPIRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DashboardAPI
      ParentId: !GetAtt DashboardAPI.RootResourceId
      PathPart: dashboard
      
  # API Gateway Method (Single secure endpoint)
  DashboardAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DashboardAPI
      ResourceId: !Ref DashboardAPIRootResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardRendererFunction.Arn}/invocations'
        
  # Lambda Permission for API Gateway
  DashboardAPILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardRendererFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DashboardAPI}/*/*'
      
  # API Gateway Deployment
  DashboardAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DashboardAPIMethod
    Properties:
      RestApiId: !Ref DashboardAPI
      StageName: !Ref Environment
      
  # CloudFront Distribution (Points to Lambda instead of S3)
  DashboardDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: LambdaOrigin
            DomainName: !Sub '${DashboardAPI}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}/dashboard'
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: ''
        Comment: !Sub '${ProjectName} Secure Dashboard Distribution'
        DefaultCacheBehavior:
          TargetOriginId: LambdaOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Aliases: !If [HasCustomDomain, [!Ref DomainName], !Ref AWS::NoValue]
        ViewerCertificate: !If 
          - HasCustomDomain
          - !If
            - HasCertificate
            - AcmCertificateArn: !Ref CertificateArn
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
            - CloudFrontDefaultCertificate: true
          - CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /dashboard
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /dashboard
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dashboard-distribution'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  DashboardRendererLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DashboardRendererFunction}'
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dashboard-renderer-logs'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  DashboardURL:
    Description: Secure Dashboard URL
    Value: !If 
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${DashboardDistribution.DomainName}'
    Export:
      Name: !Sub '${ProjectName}-secure-dashboard-url'
      
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref DashboardDistribution
    Export:
      Name: !Sub '${ProjectName}-dashboard-distribution-id'
      
  DashboardRendererFunctionArn:
    Description: Dashboard Renderer Function ARN
    Value: !Ref DashboardRendererFunction
    Export:
      Name: !Sub '${ProjectName}-dashboard-renderer-arn'
