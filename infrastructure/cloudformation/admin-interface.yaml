AWSTemplateFormatVersion: '2010-09-09'
Description: 'AiV1 - Admin Chat Interface for Governing LLM'

Parameters:
  ProjectName:
    Type: String
    Default: ai-video-codec
    Description: Name of the project

Resources:
  # DynamoDB Table for Control State
  ControlTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-control'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: control_id
          AttributeType: S
      KeySchema:
        - AttributeName: control_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-control'
        - Key: Project
          Value: !Ref ProjectName
  
  # Lambda Function for Admin API
  AdminAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-admin-api'
      Runtime: python3.9
      Handler: admin_api.lambda_handler
      Role: !GetAtt AdminAPIFunctionRole.Arn
      Timeout: 120
      Environment:
        Variables:
          ANTHROPIC_API_KEY: ''  # Set via console/CLI
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": json.dumps({"message": "Deploy lambda/admin_api.py"})}
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-admin-api'
        - Key: Project
          Value: !Ref ProjectName
  
  # IAM Role for Admin API Lambda
  AdminAPIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: AdminAPIPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB access
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-*'
              # SSM access for controlling EC2
              - Effect: Allow
                Action:
                  - 'ssm:SendCommand'
                  - 'ssm:ListCommands'
                  - 'ssm:CancelCommand'
                  - 'ssm:GetCommandInvocation'
                  - 'ssm:DescribeInstanceInformation'
                Resource: '*'
              # S3 access
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ProjectName}-*/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-admin-api-role'
        - Key: Project
          Value: !Ref ProjectName
  
  # API Gateway for Admin API
  AdminAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-admin-api'
      Description: 'Admin API for controlling experiments and chatting with LLM'
      EndpointConfiguration:
        Types: [REGIONAL]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-admin-api'
        - Key: Project
          Value: !Ref ProjectName
  
  # /admin resource
  AdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AdminAPI
      ParentId: !GetAtt AdminAPI.RootResourceId
      PathPart: admin
  
  # /admin/{proxy+} for all admin endpoints
  AdminProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AdminAPI
      ParentId: !Ref AdminResource
      PathPart: '{proxy+}'
  
  # ANY method for proxy
  AdminProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AdminAPI
      ResourceId: !Ref AdminProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminAPIFunction.Arn}/invocations'
  
  # OPTIONS for CORS
  AdminProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AdminAPI
      ResourceId: !Ref AdminProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Lambda permission for API Gateway
  AdminAPILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AdminAPIFunction
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AdminAPI}/*/*'
  
  # API Gateway Deployment
  AdminAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AdminProxyMethod
      - AdminProxyOptionsMethod
    Properties:
      RestApiId: !Ref AdminAPI
      Description: !Sub 'Deployment ${AWS::StackName} at ${AWS::StackId}'
  
  # API Gateway Stage
  AdminAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref AdminAPI
      DeploymentId: !Ref AdminAPIDeployment
      StageName: production
      Description: Production stage for admin API
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-admin-api-production'
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  AdminAPIEndpoint:
    Description: Admin API endpoint
    Value: !Sub 'https://${AdminAPI}.execute-api.${AWS::Region}.amazonaws.com/production'
    Export:
      Name: !Sub '${ProjectName}-admin-api-endpoint'
  
  ControlTableName:
    Description: Control state DynamoDB table
    Value: !Ref ControlTable
    Export:
      Name: !Sub '${ProjectName}-control-table'
  
  AdminFunctionArn:
    Description: Admin API Lambda function ARN
    Value: !GetAtt AdminAPIFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-admin-function-arn'

