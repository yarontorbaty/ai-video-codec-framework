AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Video Codec Framework - Compute Resources'

Parameters:
  ProjectName:
    Type: String
    Default: ai-video-codec
    Description: Name of the project
    
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - production
    Description: Environment name
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  OrchestratorInstanceType:
    Type: String
    Default: c6i.xlarge
    AllowedValues:
      - c6i.large
      - c6i.xlarge
      - c6i.2xlarge
    Description: Instance type for orchestrator
    
  TrainingWorkerInstanceType:
    Type: String
    Default: g5.4xlarge
    AllowedValues:
      - g5.2xlarge
      - g5.4xlarge
      - g5.8xlarge
      - g5.12xlarge
    Description: Instance type for training workers
    
  InferenceWorkerInstanceType:
    Type: String
    Default: g4dn.xlarge
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
    Description: Instance type for inference workers
    
  MaxTrainingWorkers:
    Type: Number
    Default: 4
    MinValue: 0
    MaxValue: 10
    Description: Maximum number of training workers
    
  MaxInferenceWorkers:
    Type: Number
    Default: 4
    MinValue: 0
    MaxValue: 10
    Description: Maximum number of inference workers

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'
        - Key: Environment
          Value: !Ref Environment
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-1'
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-2'
          
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-1'
          
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-2'
          
  # Security Groups
  OrchestratorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-orchestrator-sg'
      GroupDescription: Security group for orchestrator
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: Application port
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-orchestrator-sg'
          
  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-workers-sg'
      GroupDescription: Security group for workers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref OrchestratorSecurityGroup
          Description: SSH from orchestrator
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref OrchestratorSecurityGroup
          Description: Worker communication
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-workers-sg'
          
  # IAM Roles
  OrchestratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-orchestrator-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
      Policies:
        - PolicyName: CostExplorerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ce:*
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-orchestrator-role'
          
  WorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-worker-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-worker-role'
          
  # Instance Profiles
  OrchestratorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OrchestratorRole
        
  WorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerRole
        
  # SQS Queues
  TrainingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-training-queue'
      VisibilityTimeout: 7200  # 2 hours for training
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-training-queue'
          
  EvaluationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-evaluation-queue'
      VisibilityTimeout: 600  # 10 minutes
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-evaluation-queue'
          
  # DynamoDB Tables
  ExperimentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-experiments'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: experiment_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: experiment_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-experiments'
          
  MetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-metrics'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: metric_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: metric_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-metrics'
          
  CostTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-cost-tracking'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: S
        - AttributeName: service
          AttributeType: S
      KeySchema:
        - AttributeName: date
          KeyType: HASH
        - AttributeName: service
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-cost-tracking'
          
  # SNS Topics
  CostAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-cost-alerts'
      DisplayName: 'AI Video Codec Cost Alerts'
      
  SystemAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-system-alerts'
      DisplayName: 'AI Video Codec System Alerts'
      
  # Orchestrator Instance
  OrchestratorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref OrchestratorInstanceType
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 (update as needed)
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref OrchestratorInstanceProfile
      SecurityGroupIds:
        - !Ref OrchestratorSecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Clone repository
          cd /opt
          git clone https://github.com/yarontorbaty/ai-video-codec-framework.git
          cd ai-video-codec-framework
          
          # Install Python dependencies
          pip3 install -r requirements.txt
          
          # Create systemd service
          cat > /etc/systemd/system/ai-video-codec-orchestrator.service << 'EOF'
          [Unit]
          Description=AI Video Codec Orchestrator
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/opt/ai-video-codec-framework
          ExecStart=/usr/bin/python3 orchestrator/master.py --config config/aws_config.yaml
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl daemon-reload
          systemctl enable ai-video-codec-orchestrator
          systemctl start ai-video-codec-orchestrator
          
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-orchestrator'
        - Key: Environment
          Value: !Ref Environment
          
  # Training Worker Launch Template
  TrainingWorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-training-worker'
      LaunchTemplateData:
        InstanceType: !Ref TrainingWorkerInstanceType
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 with GPU support
        IamInstanceProfile:
          Arn: !GetAtt WorkerInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WorkerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y python3 python3-pip git
            
            # Install NVIDIA drivers and CUDA
            yum install -y kernel-devel-$(uname -r) kernel-headers-$(uname -r)
            yum install -y nvidia-driver nvidia-cuda-toolkit
            
            # Install Docker
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
            # Clone repository
            cd /opt
            git clone https://github.com/yarontorbaty/ai-video-codec-framework.git
            cd ai-video-codec-framework
            
            # Install Python dependencies
            pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu118
            pip3 install -r requirements.txt
            
            # Create systemd service
            cat > /etc/systemd/system/ai-video-codec-worker.service << 'EOF'
            [Unit]
            Description=AI Video Codec Worker
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/ai-video-codec-framework
            ExecStart=/usr/bin/python3 workers/training_worker.py
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            systemctl daemon-reload
            systemctl enable ai-video-codec-worker
            systemctl start ai-video-codec-worker
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-training-worker'
              - Key: Environment
                Value: !Ref Environment
                
  # Training Worker Auto Scaling Group
  TrainingWorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-training-workers'
      LaunchTemplate:
        LaunchTemplateId: !Ref TrainingWorkerLaunchTemplate
        Version: !GetAtt TrainingWorkerLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref MaxTrainingWorkers
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-training-worker'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
          
  # Inference Worker Launch Template
  InferenceWorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-inference-worker'
      LaunchTemplateData:
        InstanceType: !Ref InferenceWorkerInstanceType
        ImageId: ami-0c02fb55956c7d316
        IamInstanceProfile:
          Arn: !GetAtt WorkerInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WorkerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y python3 python3-pip git
            
            # Install Docker
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
            # Clone repository
            cd /opt
            git clone https://github.com/yarontorbaty/ai-video-codec-framework.git
            cd ai-video-codec-framework
            
            # Install Python dependencies
            pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu118
            pip3 install -r requirements.txt
            
            # Create systemd service
            cat > /etc/systemd/system/ai-video-codec-inference.service << 'EOF'
            [Unit]
            Description=AI Video Codec Inference Worker
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/ai-video-codec-framework
            ExecStart=/usr/bin/python3 workers/inference_worker.py
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            systemctl daemon-reload
            systemctl enable ai-video-codec-inference
            systemctl start ai-video-codec-inference
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-inference-worker'
              - Key: Environment
                Value: !Ref Environment
                
  # Inference Worker Auto Scaling Group
  InferenceWorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-inference-workers'
      LaunchTemplate:
        LaunchTemplateId: !Ref InferenceWorkerLaunchTemplate
        Version: !GetAtt InferenceWorkerLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref MaxInferenceWorkers
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-inference-worker'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

Outputs:
  OrchestratorPublicIP:
    Description: Public IP address of the orchestrator
    Value: !GetAtt OrchestratorInstance.PublicIp
    Export:
      Name: !Sub '${ProjectName}-orchestrator-ip'
      
  OrchestratorPrivateIP:
    Description: Private IP address of the orchestrator
    Value: !GetAtt OrchestratorInstance.PrivateIp
    Export:
      Name: !Sub '${ProjectName}-orchestrator-private-ip'
      
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-vpc-id'
      
  TrainingQueueUrl:
    Description: Training queue URL
    Value: !Ref TrainingQueue
    Export:
      Name: !Sub '${ProjectName}-training-queue-url'
      
  EvaluationQueueUrl:
    Description: Evaluation queue URL
    Value: !Ref EvaluationQueue
    Export:
      Name: !Sub '${ProjectName}-evaluation-queue-url'
      
  ExperimentsTableName:
    Description: Experiments table name
    Value: !Ref ExperimentsTable
    Export:
      Name: !Sub '${ProjectName}-experiments-table'
      
  MetricsTableName:
    Description: Metrics table name
    Value: !Ref MetricsTable
    Export:
      Name: !Sub '${ProjectName}-metrics-table'
      
  PrivateSubnet1:
    Description: Private subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${ProjectName}-private-subnet-1'
      
  PrivateSubnet2:
    Description: Private subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ProjectName}-private-subnet-2'
      
  OrchestratorSecurityGroup:
    Description: Orchestrator security group ID
    Value: !Ref OrchestratorSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-orchestrator-sg'
      
  WorkersSecurityGroup:
    Description: Workers security group ID
    Value: !Ref WorkerSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-workers-sg'
